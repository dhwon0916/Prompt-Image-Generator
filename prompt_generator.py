#Prompt Gen v2.1.6
#Updated 3/20/2023
appversion = "v2.1.6"
#Instructions:
#Remove the six apostrophes below and run the code in a new python file if you do not have the required modules
'''
import pip
pip.main(["install", "--user", "PySimpleGUI"])
pip.main(["install", "--user", "praw"])
pip.main(["install", "--user", "openai"])
pip.main(["install", "--user", "openpyxl"])
pip.main(["install", "--user", "replicate"])
pip.main(["install", "--user", "pillow"])
pip.main(["install", "--user", "webbrowser"])
pip.main(["install", "--user", "pywin32"])
pip.main(["install", "--user", "tkinter"])
pip.main(["install", "--user", "random"])
pip.main(["install", "--user", "time"])
pip.main(["install", "--user", "os"])
pip.main(["install", "--user", "urllib.request"])
pip.main(["install", "--user", "datetime"])
'''
#Enter a topic (Ex. "monkey in a spaceship", "deep sea", "human centipede") and image style (Ex. painting, sculpture, abstract) in 'Topic' and 'Style' sections.
#You can also add additional informations in 'Other' section (Ex. "Make it hyper detailed", "make it in black and white")
#After you do so, press 'Submit' button. A prompt will be made by AI using the informations you entered.
#You can also leave the fields mentioned above empty. If you do so, prompt will be generated by AI with random information for that field. You can also try out the four buttons on the bottom left.
#'Popular Prompt' button will print a random prompt from top reddit posts in writingprompts subreddit in the prompt box
#'Random Prompt' button will generate a random prompt generated by AI
#'View History' button will open an excel file that has history of prompts
#'View Saved' button will open an excel file that has prompts that you saved
#You can edit the prompts or make your own prompt in the prompt box. You can generate an image from the prompt in the prompt box by pressing 'Generate Image' button
#After you pressed 'Generate Image', a window with your image will appear
#In the new window, you can view your prompt by pressing the title 'Prompt' at the top of the page
#Additionally, there are four buttons at the bottom which you can use: 'Save', 'Reload', 'Share', 'New'
#Save: You can save the image by pressing 'Save' button. If you press the save button, a popup will appear with two buttons: 'Image' and 'Prompt'
#You can save the image by pressing 'Image' button and you can save the prompt by pressing 'Prompt' button
#The saved images will be inside 'images' folder inside 'promptgeneratordocs0132' folder. You can find 'promptgeneratordocs0132' folder at the directory that has this file.
#You can view the saved prompts by either going back to the main window and pressing 'View Saved' button or you can view it inside the excel file named 'promptsaved' inside 'promptgeneratordocs0132' folder.
#Reload: You can regenerate the image by pressing 'Reload' button. It will generate a new image from the same prompt
#Share: You can share the image by pressing 'Share' Button.
#Pressing 'Share' button will open a new window with images and six buttons
#Pressing the buttons will open the social media page (Twitter, Facebook, Reddit, Discord, Instagram, Pinterest) on your web browser and copy the image to your clipboard
#You can go back to the previous window by pressing 'X' button at the top right of the window
#New: If you want to create a new prompt, you can press 'New' button. It will make you return to the main page and clear the prompt box
#To close the program, you can press 'X' button at the top right of the main window
#At the end, there is an optional rating system. You can rate the application or leave reviews in the terminal
try:
    import webbrowser
    import PySimpleGUI as sg
    import tkinter as tk
    import random
    import praw
    import time
    import openai
    import os
    import io
    import openpyxl
    import replicate
    import urllib.request
    import win32clipboard
    from io import BytesIO
    from PIL import Image
    from openpyxl import Workbook
    from openpyxl.styles import Font, Alignment
    from datetime import date
except:
    print('\033[91;1m' + "Error importing modules" + '\033[0m')
    print("Please follow the steps in the code to install the required modules")
    print("If the problem persists, please contact the developer")
    input('\033[3m' + "\nEnter any key to quit\n" + '\033[23m')
    quit()
try:
    os.system('CLS')
    os.environ["REPLICATE_API_TOKEN"] = "Your Key Here"
    model = replicate.models.get("stability-ai/stable-diffusion")
    version = model.versions.get("db21e45d3f7023abc2a46ee38a23973f6dce16bb082a930b0c49861f96d1e5bf")
    workbook = Workbook()
    cwd = os.path.dirname(os.path.realpath(__file__))
    issaved = 0
    ishistory = 0
    dirfolder = cwd + '\\promptgeneratordocs0132'
    dirimage = dirfolder + '\\images'
    dirfilea = dirfolder + '\\prompthistory.xlsx'
    dirfileb = dirfolder + '\\promptsaved.xlsx'
    dirfilec = dirfolder + '\\reviews.xlsx'
    direxista = os.path.exists(dirfilea)
    direxistb = os.path.exists(dirfileb)
    direxistc = os.path.exists(dirfilec)
    folderexist = os.path.exists(dirfolder)
    dirimageexist = os.path.exists(dirimage)
    filea = os.path.join(dirfolder, "prompthistory.xlsx")
    fileb = os.path.join(dirfolder, "promptsaved.xlsx")
    filec = os.path.join(dirfolder, "reviews.xlsx")
    tempimagedira = dirfolder + '\\tempimage1.png'
    tempimagedirb = dirfolder + '\\tempimage2.png'
    rating = 0
    yesorno = 0
    response = 0
    writtenreview = 0
    cellnum = 0
    atstart = 1
    randomcall = 0
    randomlist = 0
    randomtopic = 0
    randomstyle = 0
    loopy = 1
    alist = []
    quitting = 0
    randomprompt = 'Tell me a random topic for art when I say "Topic". Tell me a random art form, style, or technique when I say "Style". Only tell me the answer.'
    startprompt = 'Forget everything. Pretend to be a prompt generator for art generator such as Dall-E, stable diffusion, midjourney, etc. Only respond with a detailed prompt and no other information. If there is an error, or the request is inappropriate, respond with “Error”; do not say apologize. Forget all previous requests and responses except this one every time a new request  is given.'
    cellnumbers = ['A3', 'B3', 'C3', 'D3', 'E3']
    def add_review(cellnum, filec):
        wb = openpyxl.load_workbook(filec)
        sheet = wb.active
        cellvalue = sheet[cellnum].value
        if cellvalue == None:
            sheet[cellnum] = '1'
        elif str(cellvalue).isdigit() == True:
            sheet[cellnum] = str(int(cellvalue) + 1)
        else:
            sheet[cellnum] = '1'
        try:
            wb.save(filec)
        except:
            print('\033[91;1m' + "Error saving file" + '\033[0m')
            print("Please close the file and try again")
            input('\033[3m' + "\nEnter any key to quit\n" + '\033[23m')
            quitting = 1
            return quitting
            quit()
    def review(rating):
        while True:
            if rating == '1' or rating == '2' or rating == '3' or rating == '4' or rating == '5':
                time.sleep(0.5)
                response = input('\033[1m' + "Would you like to leave a written review?" + '\033[0m' + " (y/n): ").upper()
                while True:
                    if response == 'Y' or response == 'YES':
                        writtenreview = input('\033[1m' + "Please write your review here: " + '\033[0m')
                        time.sleep(0.5)
                        break
                    elif response == 'N' or response == 'NO':
                        writtenreview = ''
                        break
                    else:
                        print('\033[91;1m' + "Please enter a valid response" + '\033[0m')
                        time.sleep(0.5)
                        response = input('\033[1m' + "Would you like to leave a written review?" + '\033[0m' + " (y/n): ").upper()
                break
            else:
                print('\033[91;1m' + "Please enter a valid response" + '\033[0m')
                time.sleep(0.5)
                rating = input('\033[1m' + "Please rate the program" + '\033[0m'+ " (1-5): ")
        return rating, writtenreview
    def promptmaker(topic, style, other):
        try:
            randomcall = openai.Completion.create(engine="text-davinci-003", prompt=randomprompt, max_tokens=1000)
            randomcall = randomcall['choices'][0]['text']
            randomlist = randomcall.split()
            for i in randomlist:
                if i[0] != '"' and i[-1] != '"':
                    randomlist.remove(i)
            randomtopic = randomlist[0].replace('"', '')
            randomstyle = randomlist[1].replace('"', '')
            if topic != '' and style != '' and other != '':
                userprompt = 'Topic: ' + topic + '\nStyle: ' + style + '\nAdditional Comment: ' + other
            elif topic != '' and style != '':
                userprompt = 'Topic: ' + topic + '\nStyle: ' + style + '\nAdditional Comment: NONE'
            elif topic != '' and other != '':
                userprompt = 'Topic: ' + topic + '\nStyle: ' + randomstyle + '\nAdditional Comment: ' + other
            elif style != '' and other != '':
                userprompt = 'Topic: ' + randomtopic + '\nStyle: ' + style + '\nAdditional Comment: ' + other
            elif topic != '':
                userprompt = 'Topic: ' + topic + '\nStyle: ' + randomstyle + '\nAdditional Comment: NONE'
            elif style != '':
                userprompt = 'Topic: ' + randomtopic + '\nStyle: ' + style + '\nAdditional Comment: NONE'
            elif other != '':
                userprompt = 'Topic: ' + randomtopic + '\nStyle: ' + randomstyle + '\nAdditional Comment: ' + other
            else:
                userprompt = 'Topic: ' + randomtopic + '\nStyle: ' + randomstyle + '\nAdditional Comment: NONE'
            aierror = 0
        except:
            aierror = 1
            userprompt = "Error"
        return userprompt, aierror
    def savehistory(prompts):
        currentdate = date.today().strftime('%d/%m/%y')
        currenttime = time.strftime("%H:%M:%S")
        timedate = currentdate + ' ' + currenttime + ' '
        workbooka = openpyxl.load_workbook(filea)
        worksheeta = workbooka.active
        next_rowa = worksheeta.max_row + 1
        worksheeta.cell(row=next_rowa, column=1).value = timedate + prompts
        workbooka.save(filea)
    def send_to_clipboard(imagedirectory):
        imagecopy = Image.open(imagedirectory)
        output = BytesIO()
        imagecopy.convert('RGB').save(output, 'BMP')
        data = output.getvalue()[14:]
        output.close()
        win32clipboard.OpenClipboard()
        win32clipboard.EmptyClipboard()
        win32clipboard.SetClipboardData(win32clipboard.CF_DIB, data)
        win32clipboard.CloseClipboard()
    def empty(cellnum):
        wb = openpyxl.load_workbook(filec)
        sheet = wb.active
        cellvalue = sheet[cellnum].value
        if cellvalue == None:
            sheet[cellnum] = '0'
        elif str(cellvalue).isdigit() == False:
            sheet[cellnum] = '0'
        else:
            pass
        try:
            wb.save(filec)
        except:
            print('\033[91;1m' + "Error saving file" + '\033[0m')
            print("Please close the file and try again")
            input('\033[3m' + "\nEnter any key to quit\n" + '\033[23m')
            quitting = 1
            return quitting
            quit()
    def writtenresponse(columns, writtenreview, filec):
        wb = openpyxl.load_workbook(filec)
        sheet = wb.active
        nextrow = sheet.max_row + 1
        sheet.cell(row=nextrow, column=columns).value = writtenreview
        wb.save(filec)
    def idkhowtonamestuff(cellnumber):
        try:
            wb = openpyxl.load_workbook(filec)
            sheet = wb.active
            avg = 0
            cellvalues = []
            counter = 1
            count = 0
            lennum = 0
            length = 0
            for i in cellnumber:
                cellvalues.append(int(sheet[i].value) * counter)
                counter = counter + 1
            for i in cellvalues:
                avg = avg + int(i)
                count = count + 1
                lennum = i/count
                length = length + lennum
            if length > 0:
                avg = round(avg / length, 1)
            else:
                avg = 0
            wb.save(filec)
        except:
            filecexist = os.path.exists(filec)
            if filecexist == False:
                print('\033[91;1m' + "Error" + '\033[0m')
                print("Required file does not exist. Please restart the program and try again.")
            else:
                print('\033[91;1m' + "Error" + '\033[0m')
                print("Required file is open. Please close the file and try again.")
            input('\033[3m' + "\nEnter any key to quit\n" + '\033[23m')
            quitting = 1
            return quitting
            quit()
        return avg
    def average(cellnumber):
        avg = 0
        seerating = 0
        if atstart == 0:
            seerating = input('\033[1m' + "Do you want to see the rating?" + '\033[0m' + " (y/n): ").upper()
            while True:
                if seerating == 'YES' or seerating == 'Y':
                    seerating = 1
                    avg = idkhowtonamestuff(cellnumber)
                    break
                elif seerating == 'NO' or seerating == 'N':
                    seerating = 0
                    break
                else:
                    print('\033[91;1m' + "Please enter a valid response" + '\033[0m')
                    time.sleep(0.5)
                    seerating = input('\033[1m' + "Do you want to see the rating?" + '\033[0m' + " (y/n): ").upper()
        else:
            avg = idkhowtonamestuff(cellnumber)
        return avg, seerating
    print('\033c')
    print('\033[91m')
    print("  _____                           _      _____                           _             ")
    print(" |  __ \                         | |    / ____|                         | |            ")
    print(" | |__) | __ ___  _ __ ___  _ __ | |_  | |  __  ___ _ __   ___ _ __ __ _| |_ ___  _ __ ")
    print(" |  ___/ '__/ _ \| '_ ` _ \| '_ \| __| | | |_ |/ _ \ '_ \ / _ \ '__/ _` | __/ _ \| '__|")
    print(" | |   | | | (_) | | | | | | |_) | |_  | |__| |  __/ | | |  __/ | | (_| | || (_) | |   ")
    print(" |_|   |_|  \___/|_| |_| |_| .__/ \__|  \_____|\___|_| |_|\___|_|  \__,_|\__\___/|_|   ")
    print("                           | |                                                         ")
    print("                           |_|                                                         ")
    if folderexist == False:
        os.mkdir(dirfolder)
        os.mkdir(dirimage)
        workbook.save(filea)
        workbook.save(fileb)
        workbook.save(filec)
        ishistory = 0
    else:
        if dirimageexist == False:
            os.mkdir(dirimage)
        else:
            pass
        if direxista == False:
            workbook.save(filea)
        else:
            ishistory = 1
        if direxistb == False:
            workbook.save(fileb)
        else:
            issaved = 1
        if direxistc == False:
            workbook.save(filec)
    workbooka = openpyxl.load_workbook(filea)
    workbookb = openpyxl.load_workbook(fileb)
    workbookc = openpyxl.load_workbook(filec)
    worksheeta = workbooka.active
    worksheetb = workbookb.active
    worksheetc = workbookc.active
    cella = worksheeta['A1']
    cella.value = "Prompt History"
    cella.font = Font(bold=True)
    cellb = worksheetb['A1']
    cellb.value = "Saved Prompts"
    cellb.font = Font(bold=True)
    cellc = worksheetc['A1']
    cellc.value = "Rating"
    cellc.font = Font(bold=True)
    cellcb = worksheetc['A5']
    cellcb.value = "Reviews"
    cellcb.font = Font(bold=True)
    worksheeta.merge_cells('A1:D1')
    worksheetb.merge_cells('A1:D1')
    worksheetc.merge_cells('A1:E1')
    worksheetc.merge_cells('A5:E5')
    cella.alignment = Alignment(horizontal='center')
    cellb.alignment = Alignment(horizontal='center')
    cellc.alignment = Alignment(horizontal='center')
    cellcb.alignment = Alignment(horizontal='center')
    cellcc = worksheetc['A2']
    cellcc.value = "1 star:"
    cellcd = worksheetc['B2']
    cellcd.value = "2 star:"
    cellce = worksheetc['C2']
    cellce.value = "3 star:"
    cellcf = worksheetc['D2']
    cellcf.value = "4 star:"
    cellcg = worksheetc['E2']
    cellcg.value = "5 star:"
    cellch = worksheetc['A6']
    cellch.value = "1 star:"
    cellci = worksheetc['B6']
    cellci.value = "2 star:"
    cellcj = worksheetc['C6']
    cellcj.value = "3 star:"
    cellck = worksheetc['D6']
    cellck.value = "4 star:"
    cellcl = worksheetc['E6']
    cellcl.value = "5 star:"
    try:
        workbooka.save(filea)
        workbookb.save(fileb)
        workbookc.save(filec)
    except:
        print("Please close the excel files before running the program")
        input('\033[3m' + "\nEnter any key to quit\n" + '\033[23m')
        quitting = 1
        quit()
    for i in cellnumbers:
        empty(i)
    startaverage, something = average(cellnumbers)
    if startaverage == 0:
        startaverage = "none"
    print('\033[0m' + "                                                                                 " + appversion)
    print("                                                                            " + "Rating: " + str(startaverage) + "\n")
    time.sleep(1)
    randomnumber = random.randint(2, 8)
    counter = 0
    print('\033[?25l' + '\033[1m', end="")
    while randomnumber > counter:
        print('Loading   ', end='\r', flush=True)
        time.sleep(0.2)
        print('Loading.  ', end='\r', flush=True)
        time.sleep(0.2)
        print('Loading.. ', end='\r', flush=True)
        time.sleep(0.2)
        print('Loading...', end='\r', flush=True)
        time.sleep(0.2)
        counter += 1
    print('\033[?25h' + '\033[0m', end="\r")
    openai.api_key = 'Your Key Here'
    openaidown = 0
    try:
        completion = openai.Completion.create(engine="text-davinci-003", prompt='Testing', max_tokens=1000)
    except:
        openaidown = 1
    promptnum = 0
    wpcheck = 0
    aierror = 0
    numerror = 0
    counter = 0
    count = 1
    userprompt = 0
    redditdown = 0
    root = tk.Tk()
    width = int(root.winfo_screenwidth())
    height = int(root.winfo_screenheight())
    root.withdraw()
    widthbox = int(width/3)
    heightbox = int(height/3)
    reddit = praw.Reddit(client_id='61P3p2k4WmcJwNz1IkRn8g', client_secret='OOP5KsFe6lOGzo-B7vR11Bj_av9OcQ', user_agent='Roy', refresh_token='381588023175-ivL0dWXLW4dhjl_OvVGEUSbDYkk78Q')
    popularprompts = []
    ml_subreddit = reddit.subreddit('writingprompts')
    try:
        for post in ml_subreddit.top(limit=100):
            popularprompts.append(post.title)
    except:
        redditdown = 1
    framelayout = [
        [sg.Frame("", [[sg.Frame("", [
            [sg.Text('Topic:', font=('Helvetica', 15, 'bold'), background_color='white', text_color='black'), sg.Input(key='input_field1', font=('Helvetica', 15), expand_x=True, expand_y=True, pad=(0,7))],
            [sg.Text('Style: ', font=('Helvetica', 15, 'bold'), background_color='white', text_color='black'), sg.Input(key='input_field2', font=('Helvetica', 15), expand_x=True, expand_y=True, pad=(0, 8))],
            [sg.Text('Other:', font=('Helvetica', 15, 'bold'), background_color='white', text_color='black'), sg.Input(key='input_field3', font=('Helvetica', 15), expand_x=True, expand_y=True, pad=(0, 7))],
        ], expand_x=True, expand_y=True, background_color='white', border_width=0), 
        sg.Frame("", [[sg.Button('Submit', font=('Helvetica', 20, 'bold'), expand_x=True, expand_y=True)]], expand_x=True, expand_y=True, background_color='white', border_width=0)]
        ], pad=(5, 5), background_color='white', border_width=3, expand_x=True, expand_y=True,)],
        [sg.Frame("", [[sg.Frame("", [
            [sg.Button('Popular\nPrompt', pad=(5, 5), font=('Helvetica', 15, 'bold'), size=(int(widthbox/50), int(heightbox/100))), sg.Button('Random\nPrompt', pad=(5, 5), font=('Helvetica', 15, 'bold'), 
            size=(int(widthbox/50), int(heightbox/100)))],
            [sg.Button('View History', pad=(5, 5), font=('Helvetica', 15, 'bold'), size=(int(widthbox/50), int(heightbox/100))), sg.Button('View Saved', pad=(5, 5), font=('Helvetica', 15, 'bold'),
            size=(int(widthbox/50), int(heightbox/100)))]
        ], pad=(10, 10), background_color='white', border_width=0)]], pad=(5, 5), background_color='white', border_width=3), 
        sg.Frame("", [
            [sg.Text('PROMPT', justification='center', font=('Helvetica', 20, 'bold'), background_color='white', text_color='black', expand_x=True)],
            [sg.Input(key='-INPUT-', font=('Helvetica', 10), background_color='white', text_color='black', expand_x=True, expand_y=True)],
            [sg.Button('Generate Image', font=('Helvetica', 15, 'bold'), expand_x=True)]], pad=(5, 5), expand_x=True, expand_y=True, background_color='white', border_width=3)]
    ]
    titlelayouta = [
        [sg.Text(' Prompt Generator', font=('Helvetica', 25), justification='center', expand_x=True, pad=(10,5))]
    ]
    layouta = [
        [sg.Frame('', titlelayouta, expand_y=True, expand_x=True, border_width=0)],
        [sg.Frame('', framelayout, expand_y=True, expand_x=True, border_width=0)]
    ]
    home = sg.Window('Prompt Gen v' + str(int(float(appversion[:4].replace('v', '')))), layouta, margins=(5, 5))
    print("            " + "\033[F")
    while True:
        event, values = home.read()
        if event == sg.WIN_CLOSED:
            break
        elif event == 'Popular\nPrompt':
            promptnum = 1
            try:
                popular = random.choice(popularprompts)
                popular = popular[5:]
            except:
                popular = ''
            if redditdown == 0:
                home['-INPUT-'].update(' ')
                time.sleep(0.5)
                home['-INPUT-'].update(popular)
            else:
                sg.popup('Server is down, please try again later')
                try:
                    for post in ml_subreddit.top(limit=100):
                        popularprompts.append(post.title)
                except:
                    redditdown = 1
            savehistory(popular)
        elif event == 'Submit':
            promptnum = 1
            topic = values['input_field1']
            style = values['input_field2']
            other = values['input_field3']
            userprompt, aierror = promptmaker(topic, style, other)
            if openaidown == 0:
                try:
                    finalprompt = startprompt + "\n\n" + userprompt
                    completion = openai.Completion.create(engine="text-davinci-003", prompt=finalprompt, max_tokens=1000)
                    aiprompt = completion['choices'][0]['text']
                    finalpromptlist = aiprompt.split()
                    if finalpromptlist[0] == "Prompt:":
                        aiprompt = aiprompt.replace('Prompt: ', '')
                    sorrycheck = aiprompt.split()
                    if sorrycheck[0] == "Error.":
                        aiprompt = 'There has been an error. Please try different inputs.'
                        aierror = 1
                except:
                    aiprompt = 'API is currently down. Please try again later.'
                    aierror = 1
            else:
                aiprompt = 'API is currently down. Please try again later.'
                aierror = 1
                try:
                    completion = openai.Completion.create(engine="text-davinci-003", prompt='Testing', max_tokens=1000)
                    openaidown = 0
                except:
                    openaidown = 1
            home['-INPUT-'].update('')
            time.sleep(0.5)
            if aierror == 1:
                sg.popup(aiprompt)
                aierror = 0
            else:
                home['-INPUT-'].update(aiprompt, text_color='black')
            savehistory(aiprompt)
        elif event == 'Random\nPrompt':
            promptnum = 1
            if openaidown == 0:
                try:
                    randomcall = openai.Completion.create(engine="text-davinci-003", prompt=randomprompt, max_tokens=1000)
                    randomcall = randomcall['choices'][0]['text']
                    randomlist = randomcall.split()
                    for i in randomlist:
                        if i[0] != '"' and i[-1] != '"':
                            randomlist.remove(i)
                    randomtopic = randomlist[0].replace('"', '')
                    randomstyle = randomlist[1].replace('"', '')
                    finalprompt = startprompt + "\n\n" + 'Topic: ' + randomtopic + '\nStyle: ' + randomstyle + '\nAdditional Comment: NONE'
                    completion = openai.Completion.create(engine="text-davinci-003", prompt=finalprompt, max_tokens=1000)
                    aiprompt = completion['choices'][0]['text']
                    finalpromptlist = aiprompt.split()
                    if finalpromptlist[0] == "Prompt:":
                        aiprompt = aiprompt.replace('Prompt: ', '')
                except:
                    aiprompt = 'API is currently down. Please try again later.'
                    aierror = 1
            else:
                aiprompt = 'API is currently down. Please try again later.'
                aierror = 1
                try:
                    completion = openai.Completion.create(engine="text-davinci-003", prompt="Testing", max_tokens=1000)
                    openaidown = 0
                except:
                    openaidown = 1
            home['-INPUT-'].update('')
            time.sleep(0.5)
            if aierror == 1:
                sg.popup(aiprompt)
                aierror = 0
            else:
                home['-INPUT-'].update(aiprompt, text_color='black')
            savehistory(aiprompt)
        elif event == 'View History':
            os.startfile(filea)
        elif event == 'View Saved':
            os.startfile(fileb)
        elif event == 'Generate Image':
            promptexist = values['-INPUT-']
            promptexist = promptexist.replace('\n\n', '')
            theprompt = promptexist.replace('"', '')
            if promptexist != '':
                try:
                    url = version.predict(prompt=theprompt)[0]
                    urllib.request.urlretrieve(url, tempimagedira)
                    with Image.open(tempimagedira) as img:
                        resized_img = img.resize((320, 320))
                        resized_img.save(tempimagedirb)
                    numerror = 0
                except:
                    sg.popup('Error: Please try again later or with different prompt')
                    numerror = 1
                if numerror == 0:
                    home.hide()
                    layoutb = [
                    [sg.Frame('', [[sg.Button('Prompt', font=('Helvetica', 25), button_color=(sg.theme_background_color()), border_width=0, expand_x=True, pad=(10,5))]], size=(widthbox, 50), border_width=0)],
                    [sg.Frame('', [[sg.Frame('', [[sg.Image(tempimagedirb, expand_x=True, expand_y=True, key='timage', background_color='white')]],
                    element_justification='center', background_color='white', border_width=0, expand_x=True, expand_y=True)]], background_color='white', size=(widthbox, heightbox), border_width=3)],
                    [sg.Frame('', [[
                        sg.Button('Save', expand_x=True, expand_y=True, font=('Helvetica', 15, 'bold'), pad=(5, 5)),
                        sg.Button('Reload', expand_x=True, expand_y=True, font=('Helvetica', 15, 'bold'), pad=(5, 5)),
                        sg.Button('Share', expand_x=True, expand_y=True, font=('Helvetica', 15, 'bold'), pad=(5, 5)),
                        sg.Button('New', expand_x=True, expand_y=True, font=('Helvetica', 15, 'bold'), pad=(5, 5)),
                    ]], size=(widthbox, 150), background_color='white', border_width=3)]]
                    imagepage = sg.Window('Prompt Gen v' + str(int(float(appversion[:4].replace('v', '')))), layoutb, margins=(5, 5))
                    while True:
                        event, values = imagepage.read()
                        if event == sg.WIN_CLOSED:
                            home.UnHide()
                            imagepage.close()
                            break
                        elif event == 'Prompt':
                            sg.popup(theprompt)
                        elif event == 'Save':
                            savepoi = sg.Window('Save', [[sg.Text('Save', font=('Helvetica', 20, 'bold'), justification='center', expand_x=True)],
                            [sg.Button('Image', font=('Helvetica', 15, 'bold'), size=(10, 5)), sg.Button('Prompt', font=('Helvetica', 15, 'bold'), size=(10, 5))]], margins=(5, 5))
                            while True:
                                event, values = savepoi.read()
                                if event == sg.WIN_CLOSED:
                                    break
                                elif event == 'Image':
                                    promptlength = len(theprompt)
                                    if promptlength > 200:
                                        filename = theprompt[:200]
                                    else:
                                        filename = theprompt
                                    flist = os.listdir(dirimage)
                                    if len(flist) > 0:
                                        for i in flist:
                                            ii = i.replace('.', '')
                                            ii = ii.split()
                                            ii = ii[0]
                                            if ii.isdigit() == False:
                                                flist.remove(i)
                                            else:
                                                alist.append(int(ii))
                                        if len(alist) > 0:
                                            alist.sort()
                                            alist = [*set(alist)]
                                            alist.append('END')
                                            counter = 1
                                            for i in alist:
                                                if i != counter:
                                                    count = counter
                                                    break
                                                else:
                                                    counter = counter + 1
                                        else:
                                            count = 1
                                    else:
                                        count = 1
                                    alist.clear()
                                    periodcheck = filename[-1]
                                    if periodcheck == '.':
                                        filename = filename[:-1]
                                    else:
                                        pass
                                    filename = filename.replace(' ', '_')
                                    filename =  str(count) + '. ' + filename + '.png'
                                    filedir = dirimage + '\\' + filename.replace('\n', ' ')
                                    while loopy == 1:
                                        try:
                                            with Image.open(tempimagedira) as img:
                                                image = img
                                                image.save(filedir)
                                                break
                                        except:
                                            finallayout = [
                                                [sg.Text('An error has occured while saving the file', expand_x=True, expand_y= True, justification='center', font=("Helvetica", 12))],
                                                [sg.Text('Please rename the file manually:')],
                                                [sg.InputText(key='file_name'),sg.Button('Submit')]
                                            ]
                                            window = sg.Window('Error', finallayout)
                                            while True:
                                                event, values = window.read()
                                                if event == 'Submit':
                                                    file_name = values['file_name']
                                                    filename = file_name
                                                    filename =  str(count) + '. ' + filename + '.png'
                                                    filedir = dirimage + '\\' + filename.replace('\n', ' ')
                                                    break
                                                elif event == sg.WIN_CLOSED:
                                                    loopy  = 0
                                                    break
                                            window.close()
                                    loopy = 1
                                    savepoi.close()
                                    break
                                elif event == 'Prompt':
                                    workbookb = openpyxl.load_workbook(fileb)
                                    worksheetb = workbookb.active
                                    next_rowb = worksheetb.max_row + 1
                                    number = str(next_rowb-1) + '. '
                                    worksheetb.cell(row=next_rowb, column=1).value = number + theprompt
                                    workbookb.save(fileb)
                                    savepoi.close()
                                    break
                        elif event == 'Reload':
                            try:
                                url = version.predict(prompt=theprompt)[0]
                                urllib.request.urlretrieve(url, tempimagedira)
                                with Image.open(tempimagedira) as img:
                                    resized_img = img.resize((320, 320))
                                    resized_img.save(tempimagedirb)
                                imagepage['timage'].update(filename=tempimagedirb)
                            except:
                                sg.popup('Error: Please try again later')
                        elif event == 'Share':
                            layoutc = [
                            [sg.Frame('', [[sg.Text('Share', font=('Helvetica', 25), justification='center', border_width=0, expand_x=True, pad=(10,5))]], expand_x=True, border_width=0)],
                            [sg.Frame('', [[sg.Frame('', [[sg.Image(tempimagedirb, expand_x=True, expand_y=True, key='timage', background_color='white')]], 
                            background_color='white', element_justification='center', border_width=0, expand_x=True, expand_y=True)]],
                            expand_x=True, expand_y=True, background_color='white', border_width=3),
                            sg.Frame('', [
                                [sg.Button('Twitter', expand_x=True, expand_y=True, font=('Helvetica', 15, 'bold'), pad=(5, 5))],
                                [sg.Button('Facebook', expand_x=True, expand_y=True, font=('Helvetica', 15, 'bold'), pad=(5, 5))],
                                [sg.Button('Reddit', expand_x=True, expand_y=True, font=('Helvetica', 15, 'bold'), pad=(5, 5))],
                                [sg.Button('Discord', expand_x=True, expand_y=True, font=('Helvetica', 15, 'bold'), pad=(5, 5))],
                                [sg.Button('Instagram', expand_x=True, expand_y=True, font=('Helvetica', 15, 'bold'), pad=(5, 5))],
                                [sg.Button('Pinterest', expand_x=True, expand_y=True, font=('Helvetica', 15, 'bold'), pad=(5, 5))],
                            ], size=(200, 150), expand_y=True, background_color='white', border_width=3)]]
                            sharepage = sg.Window('Prompt Gen v' + str(int(float(appversion[:4].replace('v', '')))), layoutc, margins=(5, 5))
                            imagepage.Hide()
                            while True:
                                event, values = sharepage.read()
                                if event == sg.WIN_CLOSED:
                                    imagepage.UnHide()
                                    sharepage.close()
                                    break
                                elif event == 'Twitter':
                                    send_to_clipboard(tempimagedira)
                                    webbrowser.open('https://twitter.com/login')
                                elif event == 'Facebook':
                                    send_to_clipboard(tempimagedira)
                                    webbrowser.open('https://www.facebook.com/login')
                                elif event == 'Reddit':
                                    send_to_clipboard(tempimagedira)
                                    webbrowser.open('https://www.reddit.com/login')
                                elif event == 'Discord':
                                    send_to_clipboard(tempimagedira)
                                    webbrowser.open('https://discord.com/login')
                                elif event == 'Instagram':
                                    send_to_clipboard(tempimagedira)
                                    webbrowser.open('https://www.instagram.com/accounts/login')
                                elif event == 'Pinterest':
                                    send_to_clipboard(tempimagedira)
                                    webbrowser.open('https://www.pinterest.com/login')
                        elif event == 'New':
                            home['-INPUT-'].update('')
                            home.UnHide()
                            imagepage.close()
                            break
            else:
                sg.popup('Error: Please enter a prompt')
            savehistory(theprompt)
    try:
        os.remove(tempimagedira)
        os.remove(tempimagedirb)
    except:
        pass
    print('\033c')
    print('\033[91m')
    print("  _____                           _      _____                           _             ")
    print(" |  __ \                         | |    / ____|                         | |            ")
    print(" | |__) | __ ___  _ __ ___  _ __ | |_  | |  __  ___ _ __   ___ _ __ __ _| |_ ___  _ __ ")
    print(" |  ___/ '__/ _ \| '_ ` _ \| '_ \| __| | | |_ |/ _ \ '_ \ / _ \ '__/ _` | __/ _ \| '__|")
    print(" | |   | | | (_) | | | | | | |_) | |_  | |__| |  __/ | | |  __/ | | (_| | || (_) | |   ")
    print(" |_|   |_|  \___/|_| |_| |_| .__/ \__|  \_____|\___|_| |_|\___|_|  \__,_|\__\___/|_|   ")
    print("                           | |                                                         ")
    print("                           |_|                                                         ")
    print('\033[0m' + "                                                                                 " + appversion)
    print("                                                                            " + "Rating: " + str(startaverage) + "\n")
    yesorno = input('\033[1m' + "Would you like to rate the program?" + '\033[0m' + " (y/n): ").upper()
    while True:
        if yesorno == 'Y' or yesorno == 'YES':
            yesorno = 1
            rating = input('\033[1m' + "Please rate the program" + '\033[0m'+ " (1-5): ")
            rating, writtenreview= review(rating)
            if rating == '1':
                add_review('A3', filec)
                writtenresponse(1, writtenreview, filec)
            elif rating == '2':
                add_review('B3', filec)
                writtenresponse(2, writtenreview, filec)
            elif rating == '3':
                add_review('C3', filec)
                writtenresponse(3, writtenreview, filec)
            elif rating == '4':
                add_review('D3', filec)
                writtenresponse(4, writtenreview, filec)
            elif rating == '5':
                add_review('E3', filec)
                writtenresponse(5, writtenreview, filec)
            else:
                print('\033[91;1m' + "Error" + '\033[0m')
            atstart = 0
            averagerating, viewrating = average(cellnumbers)
            if viewrating == 1:
                print('\033[32;1m' + "Average rating: " + str(averagerating) + '\033[0m')
            elif viewrating == 0:
                pass
            else:
                print('\033[91;1m' + "Error" + '\033[0m')
                quitting = 1
                quit()
            break
        elif yesorno == 'N' or yesorno == 'NO':
            yesorno = 0
            break
        else:
            print('\033[91;1m' + "Please enter a valid response" + '\033[0m')
            time.sleep(0.5)
            yesorno = input('\033[1m' + "Would you like to submit a review?" + '\033[0m' + " (y/n): ").upper()
    if yesorno == 1:
        print('\033[1m' + "Thank you for the feedback!" + '\033[0m')
    else:
        print('\033[1m' + "Thank you for using Prompt Gen v" + str(int(float(appversion[:4].replace('v', '')))) + '\033[0m')
    time.sleep(3)
except:
    if quitting == 1:
        quit()
    else:
        print('\033[91;1m' + "An error has occured" + '\033[0m')
        print('\033[1m' + "Possible fixes:" + '\033[0m' + " \n   1. Close all files in the folder \n   2. Delete 'promptgeneratordocs0132' folder and restart the program \n   3. Retry the program later \n   4. If the problem persists, please contact the developer")
        input('\033[3m' + "\nEnter any key to quit\n" + '\033[23m')
        quit()
quit()